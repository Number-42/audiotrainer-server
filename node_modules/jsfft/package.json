{
  "_args": [
    [
      "jsfft@git://github.com/dntj/jsfft.git",
      "/Users/ali/Programming/JavaScript/audiotrainer-server/node_modules/meyda"
    ]
  ],
  "_from": "git://github.com/dntj/jsfft.git",
  "_id": "jsfft@0.0.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/jsfft",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/dntj/jsfft/master/package.json",
      "gitUrl": "git://github.com/dntj/jsfft.git",
      "httpsUrl": "git+https://github.com/dntj/jsfft.git",
      "shortcut": "github:dntj/jsfft",
      "ssh": "git@github.com:dntj/jsfft.git",
      "sshUrl": "git+ssh://git@github.com/dntj/jsfft.git",
      "type": "github"
    },
    "name": "jsfft",
    "raw": "jsfft@git://github.com/dntj/jsfft.git",
    "rawSpec": "git://github.com/dntj/jsfft.git",
    "scope": null,
    "spec": "git://github.com/dntj/jsfft.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/meyda"
  ],
  "_resolved": "git://github.com/dntj/jsfft.git#b82257673c97f5f4bfc12fe445dcf1cf2169b46e",
  "_shasum": "263e66cef73f87b1c851b0dd0ad62de2680aaa70",
  "_shrinkwrap": null,
  "_spec": "jsfft@git://github.com/dntj/jsfft.git",
  "_where": "/Users/ali/Programming/JavaScript/audiotrainer-server/node_modules/meyda",
  "author": {
    "name": "Nick Jones"
  },
  "bugs": {
    "url": "https://github.com/dntj/jsfft/issues"
  },
  "dependencies": {},
  "description": "A lightweight FFT implementation for Javascript",
  "devDependencies": {
    "mocha": ">=1.1.0"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "b82257673c97f5f4bfc12fe445dcf1cf2169b46e",
  "homepage": "https://github.com/dntj/jsfft#readme",
  "main": "./lib/fft",
  "name": "jsfft",
  "optionalDependencies": {},
  "readme": "# jsfft\n\nSmall, efficient Javascript FFT implementation for node or the browser.\n\n## Usage\n\nJSFFT ships with a **complex_array** and a **fft** module.\n\n```javascript\nvar data = new complex_array.ComplexArray(512)\n// Use the in-place mapper to populate the data.\ndata.map(function(value, i, n) {\n  value.real = (i > n/3 && i < 2*n/3) ? 1 : 0\n})\n```\n\nIncluding the **fft** module attaches FFT methods to ComplexArray.  FFT and\nInvFFT perform in-place transforms on the underlying data:\n\n```javascript\nvar frequencies = data.FFT()\n// Implement a low-pass filter using the in-place mapper.\nfrequencies.map(function(frequency, i, n) {\n  if (i > n/5 && i < 4*n/5) {\n    frequency.real = 0\n    frequency.imag = 0\n  }\n})\n```\n\nAlternatively, frequency-space filters can be implemented via the frequencyMap:\n\n```javascript\nvar filtered = data.frequencyMap(function(frequency, i, n) {\n  if (i > n/5 && i < 4*n/5) {\n    frequency.real = 0\n    frequency.imag = 0\n  }\n})\n```\n\n## Other Implementations\n\n[DSP](https://github.com/corbanbrook/dsp.js) is a full featured Digital Signal\nProcessing library in JS which includes a JS FFT implementation.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dntj/jsfft.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.0.1"
}
